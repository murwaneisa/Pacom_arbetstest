@* 
    Component: Home
    Description: The main dashboard page that displays and manages Modbus devices.
    Provides functionality to sync devices with the Modbus server and toggle individual device states.
*@
@page "/"

@inject HttpClient HttpClient
@inject ILogger<Home> Logger
@using System.Globalization
@using arbetstest_murwan.Models
@using arbetstest_murwan.Components.UI
@using System.Diagnostics
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h3 class="text-xl font-semibold mb-4">Modbus Device Dashboard</h3>
<button class="btn btn-primary mb-3" @onclick="SyncDevices">Sync Devices</button>

@if (devices == null)
{
    <p>Loading devices...</p>
}
else if (!devices.Any())
{
    <p>No devices found.</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        @foreach (var device in devices)
        {
            <DeviceToggle Device="device" OnToggle="ToggleDevice" />
        }
    </div>
}

@code {
    private List<ModbusValue>? devices;

    /// <summary>
    /// Synchronizes device states with the Modbus server and refreshes the device list
    /// </summary>
    private async Task SyncDevices()
    {
        Logger.LogInformation("Syncing Modbus coils to DB...");
        var response = await HttpClient.PostAsync("api/Modbus/sync", null);

        if (response.IsSuccessStatusCode)
        {
            Logger.LogInformation("Modbus synced successfully.");
            devices = await HttpClient.GetFromJsonAsync<List<ModbusValue>>("api/Modbus/devices");
        }
        else
        {
            Logger.LogWarning("Failed to sync Modbus: {StatusCode}", response.StatusCode);
        }
    }

    /// <summary>
    /// Initializes the component by loading the device list from the API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync triggered.");
        devices = await HttpClient.GetFromJsonAsync<List<ModbusValue>>("api/Modbus/devices");
    }

    /// <summary>
    /// Handles toggling a device's state and updates the UI accordingly
    /// </summary>
    /// <param name="device">The Modbus device to toggle</param>
    private async Task ToggleDevice(ModbusValue device)
    {
        Logger.LogInformation("Toggling device: {DeviceId}", device.Id);

        var response = await HttpClient.PutAsJsonAsync($"api/Modbus/devices/{device.Id}", !device.IsOn);

        if (response.IsSuccessStatusCode)
        {
            device.IsOn = !device.IsOn;
            device.LastUpdated = DateTime.Now;
        }
        else
        {
            Logger.LogWarning("Failed to toggle device {DeviceId}: {StatusCode}", device.Id, response.StatusCode);
        }
    }
}